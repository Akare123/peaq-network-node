
//! Autogenerated weights for `pallet_block_reward`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-09-29, STEPS: `20`, REPEAT: 10, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("agung"), DB CACHE: 1024

// Executed Command:
// ./target/release/peaq-node
// benchmark
// pallet
// --chain
// agung
// --execution
// wasm
// --wasm-execution
// compiled
// --pallet
// pallet_block_reward
// --extrinsic
// *
// --steps
// 20
// --repeat
// 10
// --output
// weights.dev.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for `pallet_block_reward`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_block_reward::WeightInfo for WeightInfo<T> {
	// Storage: BlockReward RewardDistributionConfigStorage (r:0 w:1)
	fn set_configuration() -> Weight {
		(11_642_000 as Weight)
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: BlockReward BlockIssueReward (r:0 w:1)
	fn set_block_issue_reward() -> Weight {
		(10_850_000 as Weight)
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: BlockReward HardCap (r:0 w:1)
	fn set_hard_cap() -> Weight {
		(10_811_000 as Weight)
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
}

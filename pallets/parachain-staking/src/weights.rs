
//! Autogenerated weights for `parachain_staking`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2024-06-17, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `drping-m16`, CPU: `12th Gen Intel(R) Core(TM) i9-12900H`
//! EXECUTION: Some(Native), WASM-EXECUTION: Compiled, CHAIN: Some("dev-local"), DB CACHE: 1024

// Executed Command:
// ./target/release/peaq-node
// benchmark
// pallet
// --chain=dev-local
// --execution=native
// --wasm-execution=compiled
// --pallet=parachain-staking
// --extrinsic=*
// --steps=50
// --repeat=20
// --output=weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions for `parachain_staking`.
pub struct WeightInfo<T>(PhantomData<T>);

impl<T: frame_system::Config> crate::WeightInfo for WeightInfo<T> {
	/// Storage: ParachainStaking Round (r:1 w:0)
	/// Proof: ParachainStaking Round (max_values: Some(1), max_size: Some(12), added: 507, mode: MaxEncodedLen)
	fn on_initialize_no_action() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `328`
		//  Estimated: `1497`
		// Minimum execution time: 3_442_000 picoseconds.
		Weight::from_parts(3_613_000, 0)
			.saturating_add(Weight::from_parts(0, 1497))
			.saturating_add(T::DbWeight::get().reads(1))
	}
	/// Storage: ParachainStaking Round (r:1 w:1)
	/// Proof: ParachainStaking Round (max_values: Some(1), max_size: Some(12), added: 507, mode: MaxEncodedLen)
	fn on_initialize_round_update() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `328`
		//  Estimated: `1497`
		// Minimum execution time: 4_809_000 picoseconds.
		Weight::from_parts(4_921_000, 0)
			.saturating_add(Weight::from_parts(0, 1497))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: ParachainStaking ForceNewRound (r:0 w:1)
	/// Proof: ParachainStaking ForceNewRound (max_values: Some(1), max_size: Some(1), added: 496, mode: MaxEncodedLen)
	fn force_new_round() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 702_000 picoseconds.
		Weight::from_parts(746_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:1)
	/// Proof: ParachainStaking MaxSelectedCandidates (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TopCandidates (r:1 w:0)
	/// Proof: ParachainStaking TopCandidates (max_values: Some(1), max_size: Some(769), added: 1264, mode: MaxEncodedLen)
	/// Storage: ParachainStaking CandidatePool (r:12 w:0)
	/// Proof: ParachainStaking CandidatePool (max_values: None, max_size: Some(1314), added: 3789, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	/// Proof: ParachainStaking TotalCollatorStake (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// The range of component `n` is `[4, 16]`.
	/// The range of component `m` is `[0, 25]`.
	fn set_max_selected_candidates(n: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + m * (576 ±0) + n * (1367 ±0)`
		//  Estimated: `4779 + n * (2879 ±11)`
		// Minimum execution time: 11_169_000 picoseconds.
		Weight::from_parts(11_610_000, 0)
			.saturating_add(Weight::from_parts(0, 4779))
			// Standard Error: 12_338
			.saturating_add(Weight::from_parts(1_574_176, 0).saturating_mul(n.into()))
			// Standard Error: 8_160
			.saturating_add(Weight::from_parts(33_478, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().writes(2))
			.saturating_add(Weight::from_parts(0, 2879).saturating_mul(n.into()))
	}
	/// Storage: ParachainStaking Round (r:1 w:1)
	/// Proof: ParachainStaking Round (max_values: Some(1), max_size: Some(12), added: 507, mode: MaxEncodedLen)
	fn set_blocks_per_round() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `328`
		//  Estimated: `1497`
		// Minimum execution time: 5_448_000 picoseconds.
		Weight::from_parts(5_790_000, 0)
			.saturating_add(Weight::from_parts(0, 1497))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: ParachainStaking CandidatePool (r:5 w:1)
	/// Proof: ParachainStaking CandidatePool (max_values: None, max_size: Some(1314), added: 3789, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TopCandidates (r:1 w:1)
	/// Proof: ParachainStaking TopCandidates (max_values: Some(1), max_size: Some(769), added: 1264, mode: MaxEncodedLen)
	/// Storage: ParachainStaking Unstaking (r:26 w:26)
	/// Proof: ParachainStaking Unstaking (max_values: None, max_size: Some(241), added: 2716, mode: MaxEncodedLen)
	/// Storage: ParachainStaking DelegatorState (r:25 w:25)
	/// Proof: ParachainStaking DelegatorState (max_values: None, max_size: Some(105), added: 2580, mode: MaxEncodedLen)
	/// Storage: Session Validators (r:1 w:0)
	/// Proof Skipped: Session Validators (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Session DisabledValidators (r:1 w:1)
	/// Proof Skipped: Session DisabledValidators (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: System Digest (r:1 w:1)
	/// Proof Skipped: System Digest (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: ParachainStaking CounterForCandidatePool (r:1 w:1)
	/// Proof: ParachainStaking CounterForCandidatePool (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	/// Proof: ParachainStaking MaxSelectedCandidates (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	/// Proof: ParachainStaking TotalCollatorStake (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// The range of component `n` is `[5, 16]`.
	/// The range of component `m` is `[0, 25]`.
	fn force_remove_candidate(n: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + m * (955 ±0) + n * (787 ±0)`
		//  Estimated: `19935 + m * (2716 ±0) + n * (192 ±8)`
		// Minimum execution time: 29_802_000 picoseconds.
		Weight::from_parts(30_591_000, 0)
			.saturating_add(Weight::from_parts(0, 19935))
			// Standard Error: 25_989
			.saturating_add(Weight::from_parts(889_576, 0).saturating_mul(n.into()))
			// Standard Error: 17_361
			.saturating_add(Weight::from_parts(6_064_506, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(13))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(m.into())))
			.saturating_add(T::DbWeight::get().writes(7))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(m.into())))
			.saturating_add(Weight::from_parts(0, 2716).saturating_mul(m.into()))
			.saturating_add(Weight::from_parts(0, 192).saturating_mul(n.into()))
	}
	/// Storage: ParachainStaking CandidatePool (r:1 w:1)
	/// Proof: ParachainStaking CandidatePool (max_values: None, max_size: Some(1314), added: 3789, mode: MaxEncodedLen)
	/// Storage: ParachainStaking DelegatorState (r:1 w:0)
	/// Proof: ParachainStaking DelegatorState (max_values: None, max_size: Some(105), added: 2580, mode: MaxEncodedLen)
	/// Storage: ParachainStaking MaxCollatorCandidateStake (r:1 w:0)
	/// Proof: ParachainStaking MaxCollatorCandidateStake (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// Storage: ParachainStaking Unstaking (r:1 w:1)
	/// Proof: ParachainStaking Unstaking (max_values: None, max_size: Some(241), added: 2716, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Balances Locks (r:1 w:1)
	/// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	/// Storage: Balances Freezes (r:1 w:0)
	/// Proof: Balances Freezes (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TopCandidates (r:1 w:1)
	/// Proof: ParachainStaking TopCandidates (max_values: Some(1), max_size: Some(769), added: 1264, mode: MaxEncodedLen)
	/// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	/// Proof: ParachainStaking MaxSelectedCandidates (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: ParachainStaking CounterForCandidatePool (r:1 w:1)
	/// Proof: ParachainStaking CounterForCandidatePool (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	/// Proof: ParachainStaking TotalCollatorStake (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// The range of component `n` is `[1, 15]`.
	/// The range of component `m` is `[0, 25]`.
	fn join_candidates(n: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `884 + m * (63 ±0) + n * (165 ±0)`
		//  Estimated: `4779 + m * (61 ±0)`
		// Minimum execution time: 26_454_000 picoseconds.
		Weight::from_parts(25_082_355, 0)
			.saturating_add(Weight::from_parts(0, 4779))
			// Standard Error: 12_212
			.saturating_add(Weight::from_parts(660_810, 0).saturating_mul(n.into()))
			// Standard Error: 6_972
			.saturating_add(Weight::from_parts(405_632, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(11))
			.saturating_add(T::DbWeight::get().writes(7))
			.saturating_add(Weight::from_parts(0, 61).saturating_mul(m.into()))
	}
	/// Storage: ParachainStaking CandidatePool (r:5 w:1)
	/// Proof: ParachainStaking CandidatePool (max_values: None, max_size: Some(1314), added: 3789, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TopCandidates (r:1 w:1)
	/// Proof: ParachainStaking TopCandidates (max_values: Some(1), max_size: Some(769), added: 1264, mode: MaxEncodedLen)
	/// Storage: ParachainStaking Round (r:1 w:0)
	/// Proof: ParachainStaking Round (max_values: Some(1), max_size: Some(12), added: 507, mode: MaxEncodedLen)
	/// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	/// Proof: ParachainStaking MaxSelectedCandidates (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	/// Proof: ParachainStaking TotalCollatorStake (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// The range of component `n` is `[5, 15]`.
	/// The range of component `m` is `[0, 25]`.
	fn init_leave_candidates(n: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `815 + m * (240 ±0) + n * (82 ±0)`
		//  Estimated: `19935`
		// Minimum execution time: 22_919_000 picoseconds.
		Weight::from_parts(19_659_918, 0)
			.saturating_add(Weight::from_parts(0, 19935))
			// Standard Error: 9_326
			.saturating_add(Weight::from_parts(530_216, 0).saturating_mul(n.into()))
			// Standard Error: 3_863
			.saturating_add(Weight::from_parts(313_921, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(9))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: ParachainStaking CandidatePool (r:2 w:1)
	/// Proof: ParachainStaking CandidatePool (max_values: None, max_size: Some(1314), added: 3789, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TopCandidates (r:1 w:1)
	/// Proof: ParachainStaking TopCandidates (max_values: Some(1), max_size: Some(769), added: 1264, mode: MaxEncodedLen)
	/// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	/// Proof: ParachainStaking MaxSelectedCandidates (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	/// Proof: ParachainStaking TotalCollatorStake (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// The range of component `n` is `[5, 15]`.
	/// The range of component `m` is `[0, 25]`.
	fn cancel_leave_candidates(n: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `516 + m * (96 ±0) + n * (70 ±0)`
		//  Estimated: `8568`
		// Minimum execution time: 14_832_000 picoseconds.
		Weight::from_parts(12_281_599, 0)
			.saturating_add(Weight::from_parts(0, 8568))
			// Standard Error: 7_860
			.saturating_add(Weight::from_parts(407_883, 0).saturating_mul(n.into()))
			// Standard Error: 3_256
			.saturating_add(Weight::from_parts(243_831, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: ParachainStaking CandidatePool (r:1 w:1)
	/// Proof: ParachainStaking CandidatePool (max_values: None, max_size: Some(1314), added: 3789, mode: MaxEncodedLen)
	/// Storage: ParachainStaking Round (r:1 w:0)
	/// Proof: ParachainStaking Round (max_values: Some(1), max_size: Some(12), added: 507, mode: MaxEncodedLen)
	/// Storage: ParachainStaking Unstaking (r:26 w:26)
	/// Proof: ParachainStaking Unstaking (max_values: None, max_size: Some(241), added: 2716, mode: MaxEncodedLen)
	/// Storage: ParachainStaking DelegatorState (r:25 w:25)
	/// Proof: ParachainStaking DelegatorState (max_values: None, max_size: Some(105), added: 2580, mode: MaxEncodedLen)
	/// Storage: Session Validators (r:1 w:0)
	/// Proof Skipped: Session Validators (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Session DisabledValidators (r:1 w:1)
	/// Proof Skipped: Session DisabledValidators (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: System Digest (r:1 w:1)
	/// Proof Skipped: System Digest (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: ParachainStaking CounterForCandidatePool (r:1 w:1)
	/// Proof: ParachainStaking CounterForCandidatePool (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// The range of component `n` is `[5, 15]`.
	/// The range of component `m` is `[0, 25]`.
	fn execute_leave_candidates(n: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + m * (742 ±0) + n * (750 ±0)`
		//  Estimated: `4779 + m * (2716 ±4) + n * (176 ±7)`
		// Minimum execution time: 17_937_000 picoseconds.
		Weight::from_parts(18_478_000, 0)
			.saturating_add(Weight::from_parts(0, 4779))
			// Standard Error: 29_033
			.saturating_add(Weight::from_parts(929_304, 0).saturating_mul(n.into()))
			// Standard Error: 18_230
			.saturating_add(Weight::from_parts(5_935_663, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(m.into())))
			.saturating_add(T::DbWeight::get().writes(5))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(m.into())))
			.saturating_add(Weight::from_parts(0, 2716).saturating_mul(m.into()))
			.saturating_add(Weight::from_parts(0, 176).saturating_mul(n.into()))
	}
	/// Storage: ParachainStaking CandidatePool (r:1 w:1)
	/// Proof: ParachainStaking CandidatePool (max_values: None, max_size: Some(1314), added: 3789, mode: MaxEncodedLen)
	/// Storage: ParachainStaking MaxCollatorCandidateStake (r:1 w:0)
	/// Proof: ParachainStaking MaxCollatorCandidateStake (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: ParachainStaking Unstaking (r:1 w:1)
	/// Proof: ParachainStaking Unstaking (max_values: None, max_size: Some(241), added: 2716, mode: MaxEncodedLen)
	/// Storage: Balances Locks (r:1 w:1)
	/// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	/// Storage: Balances Freezes (r:1 w:0)
	/// Proof: Balances Freezes (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TopCandidates (r:1 w:1)
	/// Proof: ParachainStaking TopCandidates (max_values: Some(1), max_size: Some(769), added: 1264, mode: MaxEncodedLen)
	/// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	/// Proof: ParachainStaking MaxSelectedCandidates (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	/// Proof: ParachainStaking TotalCollatorStake (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// The range of component `n` is `[1, 15]`.
	/// The range of component `m` is `[0, 25]`.
	/// The range of component `u` is `[0, 9]`.
	fn candidate_stake_more(n: u32, m: u32, u: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `460 + m * (105 ±0) + n * (158 ±0) + u * (20 ±0)`
		//  Estimated: `4779`
		// Minimum execution time: 27_539_000 picoseconds.
		Weight::from_parts(21_105_760, 0)
			.saturating_add(Weight::from_parts(0, 4779))
			// Standard Error: 8_296
			.saturating_add(Weight::from_parts(665_974, 0).saturating_mul(n.into()))
			// Standard Error: 4_736
			.saturating_add(Weight::from_parts(404_319, 0).saturating_mul(m.into()))
			// Standard Error: 12_567
			.saturating_add(Weight::from_parts(189_500, 0).saturating_mul(u.into()))
			.saturating_add(T::DbWeight::get().reads(9))
			.saturating_add(T::DbWeight::get().writes(6))
	}
	/// Storage: ParachainStaking CandidatePool (r:1 w:1)
	/// Proof: ParachainStaking CandidatePool (max_values: None, max_size: Some(1314), added: 3789, mode: MaxEncodedLen)
	/// Storage: ParachainStaking Unstaking (r:1 w:1)
	/// Proof: ParachainStaking Unstaking (max_values: None, max_size: Some(241), added: 2716, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TopCandidates (r:1 w:1)
	/// Proof: ParachainStaking TopCandidates (max_values: Some(1), max_size: Some(769), added: 1264, mode: MaxEncodedLen)
	/// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	/// Proof: ParachainStaking MaxSelectedCandidates (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	/// Proof: ParachainStaking TotalCollatorStake (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// The range of component `n` is `[1, 15]`.
	/// The range of component `m` is `[0, 25]`.
	fn candidate_stake_less(n: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `625 + m * (63 ±0) + n * (107 ±0)`
		//  Estimated: `4779`
		// Minimum execution time: 16_130_000 picoseconds.
		Weight::from_parts(11_832_715, 0)
			.saturating_add(Weight::from_parts(0, 4779))
			// Standard Error: 5_919
			.saturating_add(Weight::from_parts(477_874, 0).saturating_mul(n.into()))
			// Standard Error: 3_379
			.saturating_add(Weight::from_parts(280_656, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: ParachainStaking DelegatorState (r:1 w:1)
	/// Proof: ParachainStaking DelegatorState (max_values: None, max_size: Some(105), added: 2580, mode: MaxEncodedLen)
	/// Storage: ParachainStaking CandidatePool (r:2 w:1)
	/// Proof: ParachainStaking CandidatePool (max_values: None, max_size: Some(1314), added: 3789, mode: MaxEncodedLen)
	/// Storage: ParachainStaking Unstaking (r:1 w:1)
	/// Proof: ParachainStaking Unstaking (max_values: None, max_size: Some(241), added: 2716, mode: MaxEncodedLen)
	/// Storage: ParachainStaking LastDelegation (r:1 w:1)
	/// Proof: ParachainStaking LastDelegation (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// Storage: ParachainStaking Round (r:1 w:0)
	/// Proof: ParachainStaking Round (max_values: Some(1), max_size: Some(12), added: 507, mode: MaxEncodedLen)
	/// Storage: Balances Locks (r:1 w:1)
	/// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	/// Storage: Balances Freezes (r:1 w:0)
	/// Proof: Balances Freezes (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TopCandidates (r:1 w:1)
	/// Proof: ParachainStaking TopCandidates (max_values: Some(1), max_size: Some(769), added: 1264, mode: MaxEncodedLen)
	/// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	/// Proof: ParachainStaking MaxSelectedCandidates (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	/// Proof: ParachainStaking TotalCollatorStake (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// The range of component `n` is `[1, 16]`.
	/// The range of component `m` is `[1, 24]`.
	fn join_delegators(n: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1235 + m * (131 ±0) + n * (192 ±0)`
		//  Estimated: `8568`
		// Minimum execution time: 35_872_000 picoseconds.
		Weight::from_parts(23_542_702, 0)
			.saturating_add(Weight::from_parts(0, 8568))
			// Standard Error: 11_487
			.saturating_add(Weight::from_parts(920_265, 0).saturating_mul(n.into()))
			// Standard Error: 7_586
			.saturating_add(Weight::from_parts(652_819, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(12))
			.saturating_add(T::DbWeight::get().writes(8))
	}
	/// Storage: ParachainStaking DelegatorState (r:1 w:1)
	/// Proof: ParachainStaking DelegatorState (max_values: None, max_size: Some(105), added: 2580, mode: MaxEncodedLen)
	/// Storage: ParachainStaking CandidatePool (r:1 w:1)
	/// Proof: ParachainStaking CandidatePool (max_values: None, max_size: Some(1314), added: 3789, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: ParachainStaking Unstaking (r:1 w:1)
	/// Proof: ParachainStaking Unstaking (max_values: None, max_size: Some(241), added: 2716, mode: MaxEncodedLen)
	/// Storage: Balances Locks (r:1 w:1)
	/// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	/// Storage: Balances Freezes (r:1 w:0)
	/// Proof: Balances Freezes (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TopCandidates (r:1 w:1)
	/// Proof: ParachainStaking TopCandidates (max_values: Some(1), max_size: Some(769), added: 1264, mode: MaxEncodedLen)
	/// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	/// Proof: ParachainStaking MaxSelectedCandidates (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	/// Proof: ParachainStaking TotalCollatorStake (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// The range of component `n` is `[1, 16]`.
	/// The range of component `m` is `[1, 24]`.
	/// The range of component `u` is `[1, 9]`.
	fn delegator_stake_more(n: u32, m: u32, u: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1028 + m * (110 ±0) + n * (168 ±0) + u * (20 ±0)`
		//  Estimated: `4779`
		// Minimum execution time: 32_386_000 picoseconds.
		Weight::from_parts(28_572_234, 0)
			.saturating_add(Weight::from_parts(0, 4779))
			// Standard Error: 7_510
			.saturating_add(Weight::from_parts(420_432, 0).saturating_mul(n.into()))
			// Standard Error: 4_962
			.saturating_add(Weight::from_parts(337_610, 0).saturating_mul(m.into()))
			// Standard Error: 13_583
			.saturating_add(Weight::from_parts(82_933, 0).saturating_mul(u.into()))
			.saturating_add(T::DbWeight::get().reads(9))
			.saturating_add(T::DbWeight::get().writes(7))
	}
	/// Storage: ParachainStaking DelegatorState (r:1 w:1)
	/// Proof: ParachainStaking DelegatorState (max_values: None, max_size: Some(105), added: 2580, mode: MaxEncodedLen)
	/// Storage: ParachainStaking CandidatePool (r:1 w:1)
	/// Proof: ParachainStaking CandidatePool (max_values: None, max_size: Some(1314), added: 3789, mode: MaxEncodedLen)
	/// Storage: ParachainStaking Unstaking (r:1 w:1)
	/// Proof: ParachainStaking Unstaking (max_values: None, max_size: Some(241), added: 2716, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TopCandidates (r:1 w:1)
	/// Proof: ParachainStaking TopCandidates (max_values: Some(1), max_size: Some(769), added: 1264, mode: MaxEncodedLen)
	/// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	/// Proof: ParachainStaking MaxSelectedCandidates (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	/// Proof: ParachainStaking TotalCollatorStake (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// The range of component `n` is `[1, 16]`.
	/// The range of component `m` is `[1, 24]`.
	fn delegator_stake_less(n: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `943 + m * (81 ±0) + n * (122 ±0)`
		//  Estimated: `4779`
		// Minimum execution time: 22_729_000 picoseconds.
		Weight::from_parts(17_540_260, 0)
			.saturating_add(Weight::from_parts(0, 4779))
			// Standard Error: 6_019
			.saturating_add(Weight::from_parts(524_443, 0).saturating_mul(n.into()))
			// Standard Error: 3_974
			.saturating_add(Weight::from_parts(318_549, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(5))
	}
	/// Storage: ParachainStaking DelegatorState (r:1 w:1)
	/// Proof: ParachainStaking DelegatorState (max_values: None, max_size: Some(105), added: 2580, mode: MaxEncodedLen)
	/// Storage: ParachainStaking CandidatePool (r:1 w:1)
	/// Proof: ParachainStaking CandidatePool (max_values: None, max_size: Some(1314), added: 3789, mode: MaxEncodedLen)
	/// Storage: ParachainStaking Unstaking (r:1 w:1)
	/// Proof: ParachainStaking Unstaking (max_values: None, max_size: Some(241), added: 2716, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TopCandidates (r:1 w:1)
	/// Proof: ParachainStaking TopCandidates (max_values: Some(1), max_size: Some(769), added: 1264, mode: MaxEncodedLen)
	/// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	/// Proof: ParachainStaking MaxSelectedCandidates (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	/// Proof: ParachainStaking TotalCollatorStake (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// The range of component `n` is `[1, 16]`.
	/// The range of component `m` is `[1, 24]`.
	fn revoke_delegation(n: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `943 + m * (81 ±0) + n * (122 ±0)`
		//  Estimated: `4779`
		// Minimum execution time: 24_222_000 picoseconds.
		Weight::from_parts(19_276_128, 0)
			.saturating_add(Weight::from_parts(0, 4779))
			// Standard Error: 5_826
			.saturating_add(Weight::from_parts(510_824, 0).saturating_mul(n.into()))
			// Standard Error: 3_847
			.saturating_add(Weight::from_parts(300_392, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(5))
	}
	/// Storage: ParachainStaking DelegatorState (r:1 w:1)
	/// Proof: ParachainStaking DelegatorState (max_values: None, max_size: Some(105), added: 2580, mode: MaxEncodedLen)
	/// Storage: ParachainStaking CandidatePool (r:1 w:1)
	/// Proof: ParachainStaking CandidatePool (max_values: None, max_size: Some(1314), added: 3789, mode: MaxEncodedLen)
	/// Storage: ParachainStaking Unstaking (r:1 w:1)
	/// Proof: ParachainStaking Unstaking (max_values: None, max_size: Some(241), added: 2716, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TopCandidates (r:1 w:1)
	/// Proof: ParachainStaking TopCandidates (max_values: Some(1), max_size: Some(769), added: 1264, mode: MaxEncodedLen)
	/// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	/// Proof: ParachainStaking MaxSelectedCandidates (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	/// Proof: ParachainStaking TotalCollatorStake (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// The range of component `n` is `[1, 16]`.
	/// The range of component `m` is `[1, 24]`.
	fn leave_delegators(n: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `943 + m * (81 ±0) + n * (122 ±0)`
		//  Estimated: `4779`
		// Minimum execution time: 24_004_000 picoseconds.
		Weight::from_parts(19_104_596, 0)
			.saturating_add(Weight::from_parts(0, 4779))
			// Standard Error: 6_688
			.saturating_add(Weight::from_parts(499_158, 0).saturating_mul(n.into()))
			// Standard Error: 4_417
			.saturating_add(Weight::from_parts(316_289, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(5))
	}
	/// Storage: ParachainStaking Unstaking (r:1 w:1)
	/// Proof: ParachainStaking Unstaking (max_values: None, max_size: Some(241), added: 2716, mode: MaxEncodedLen)
	/// Storage: Balances Locks (r:1 w:1)
	/// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	/// Storage: Balances Freezes (r:1 w:0)
	/// Proof: Balances Freezes (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// The range of component `u` is `[1, 9]`.
	fn unlock_unstaked(u: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `668 + u * (20 ±0)`
		//  Estimated: `4764`
		// Minimum execution time: 13_911_000 picoseconds.
		Weight::from_parts(14_853_114, 0)
			.saturating_add(Weight::from_parts(0, 4764))
			// Standard Error: 4_202
			.saturating_add(Weight::from_parts(24_048, 0).saturating_mul(u.into()))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: ParachainStaking MaxCollatorCandidateStake (r:0 w:1)
	/// Proof: ParachainStaking MaxCollatorCandidateStake (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	fn set_max_candidate_stake() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_893_000 picoseconds.
		Weight::from_parts(1_994_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: ParachainStaking CandidatePool (r:1 w:1)
	/// Proof: ParachainStaking CandidatePool (max_values: None, max_size: Some(1314), added: 3789, mode: MaxEncodedLen)
	/// The range of component `n` is `[1, 16]`.
	/// The range of component `m` is `[0, 1000000]`.
	fn set_commission(_n: u32, _m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `393`
		//  Estimated: `4779`
		// Minimum execution time: 5_711_000 picoseconds.
		Weight::from_parts(6_261_710, 0)
			.saturating_add(Weight::from_parts(0, 4779))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
}
